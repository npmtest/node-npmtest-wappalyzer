{"/home/travis/build/npmtest/node-npmtest-wappalyzer/test.js":"/* istanbul instrument in package npmtest_wappalyzer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wappalyzer/lib.npmtest_wappalyzer.js":"/* istanbul instrument in package npmtest_wappalyzer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wappalyzer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wappalyzer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wappalyzer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wappalyzer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wappalyzer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wappalyzer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wappalyzer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wappalyzer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wappalyzer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wappalyzer.__dirname + '/lib.npmtest_wappalyzer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wappalyzer/node_modules/wappalyzer/index.js":"'use strict';\n\nconst\n\tpath      = require('path'),\n\tspawn     = require('child_process').spawn,\n\tphantomjs = require('phantomjs-prebuilt');\n\nexports.run = function(args, callback) {\n\targs.unshift.apply(args, [path.join(__dirname, 'driver.js'), '--web-security=false', '--load-images=false', '--ignore-ssl-errors=yes', '--ssl-protocol=any']);\n\n\tvar driver = phantomjs.exec.apply(this, args);\n\n\tdriver.stdout.on('data', (data) => {\n\t\tcallback(`${data}`, null);\n\t});\n\n\tdriver.stderr.on('data', (data) => {\n\t\tcallback(null, `${data}`);\n\t});\n}\n\nif ( !module.parent ) {\n\texports.run(process.argv.slice(2), function(stdout, stderr) {\n\t\tif ( stdout ) {\n\t\t\tprocess.stdout.write(stdout);\n\t\t}\n\n\t\tif ( stderr ) {\n\t\t\tprocess.stderr.write(stderr);\n\t\t}\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-wappalyzer/node_modules/wappalyzer/driver.js":"(function() {\n\tvar\n\t\turl,\n\t\toriginalUrl,\n\t\tscriptDir,\n\t\tscriptPath      = require('fs').absolute(require('system').args[0]),\n\t\tresourceTimeout = 9000,\n\t\targs            = [],    // TODO: Not used, maybe should be `arg`\n\t\tdebug           = false, // Output debug messages\n\t\tquiet           = false; // Don't output errors\n\n\ttry {\n\t\t// Working directory\n\t\tscriptDir = scriptPath.split('/'); scriptDir.pop(); scriptDir = scriptDir.join('/');\n\n\t\trequire('fs').changeWorkingDirectory(scriptDir);\n\n\t\trequire('system').args.forEach(function(arg, i) {\n\t\t\tvar arr = /^(--[^=]+)=(.+)$/.exec(arg);\n\n\t\t\tif ( arr && arr.length === 3 ) {\n\t\t\t\targ   = arr[1];\n\t\t\t\tvalue = arr[2];\n\t\t\t}\n\n\t\t\tswitch ( arg ) {\n\t\t\t\tcase '-v':\n\t\t\t\tcase '--verbose':\n\t\t\t\t\tdebug = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-q':\n\t\t\t\tcase '--quiet':\n\t\t\t\t\tquiet = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase '--resource-timeout':\n\t\t\t\t\tresourceTimeout = value;\n\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\turl = originalUrl = arg;\n\t\t\t}\n\t\t});\n\n\t\tif ( !url ) {\n\t\t\tthrow new Error('Usage: phantomjs ' + require('system').args[0] + ' <url>');\n\t\t}\n\n\t\tif ( !phantom.injectJs('wappalyzer.js') ) {\n\t\t\tthrow new Error('Unable to open file js/wappalyzer.js');\n\t\t}\n\n\t\twappalyzer.driver = {\n\t\t\ttimeout: 1000,\n\n\t\t\t/**\n\t\t\t * Log messages to console\n\t\t\t */\n\t\t\tlog: function(args) {\n\t\t\t\tif ( args.type === 'error' ) {\n\t\t\t\t\tif ( !quiet ) {\n\t\t\t\t\t\trequire('system').stderr.write(args.message + \"\\n\");\n\t\t\t\t\t}\n\t\t\t\t} else if ( debug || args.type !== 'debug' ) {\n\t\t\t\t\trequire('system').stdout.write(args.message + \"\\n\");\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Display apps\n\t\t\t */\n\t\t\tdisplayApps: function() {\n\t\t\t\tvar\n\t\t\t\t\tapp, cats,\n\t\t\t\t\tapps  = [];\n\n\t\t\t\twappalyzer.log('driver.displayApps');\n\n\t\t\t\tfor ( app in wappalyzer.detected[url] ) {\n\t\t\t\t\tcats = [];\n\n\t\t\t\t\twappalyzer.apps[app].cats.forEach(function(cat) {\n\t\t\t\t\t\tcats.push(wappalyzer.categories[cat].name);\n\t\t\t\t\t});\n\n\t\t\t\t\tapps.push({\n\t\t\t\t\t\tname: app,\n\t\t\t\t\t\tconfidence: wappalyzer.detected[url][app].confidenceTotal.toString(),\n\t\t\t\t\t\tversion:    wappalyzer.detected[url][app].version,\n\t\t\t\t\t\ticon:       wappalyzer.apps[app].icon || 'default.svg',\n\t\t\t\t\t\twebsite:    wappalyzer.apps[app].website,\n\t\t\t\t\t\tcategories: cats\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\twappalyzer.driver.sendResponse(apps);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Send response\n\t\t\t */\n\t\t\tsendResponse: function(apps) {\n\t\t\t\tapps = apps || [];\n\n\t\t\t\trequire('system').stdout.write(JSON.stringify({ url: url, originalUrl: originalUrl, applications: apps }) + \"\\n\");\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Initialize\n\t\t\t */\n\t\t\tinit: function() {\n\t\t\t\tvar\n\t\t\t\t\tpage, hostname,\n\t\t\t\t\theaders = {};\n\t\t\t\t\ta       = document.createElement('a'),\n\t\t\t\t\tjson    = JSON.parse(require('fs').read('apps.json'));\n\n\t\t\t\twappalyzer.log('driver.init');\n\n\t\t\t\ta.href = url.replace(/#.*$/, '');\n\n\t\t\t\thostname = a.hostname;\n\n\t\t\t\twappalyzer.apps       = json.apps;\n\t\t\t\twappalyzer.categories = json.categories;\n\n\t\t\t\tpage = require('webpage').create();\n\n\t\t\t\tpage.settings.loadImages      = false;\n\t\t\t\tpage.settings.userAgent       = 'Mozilla/5.0 (compatible; Wappalyzer; +https://github.com/AliasIO/Wappalyzer)';\n\t\t\t\tpage.settings.resourceTimeout = resourceTimeout;\n\n\t\t\t\tpage.onError = function(message) {\n\t\t\t\t\twappalyzer.log(message, 'error');\n\t\t\t\t};\n\n\t\t\t\tpage.onResourceTimeout = function() {\n\t\t\t\t\twappalyzer.log('Resource timeout', 'error');\n\n\t\t\t\t\twappalyzer.driver.sendResponse();\n\n\t\t\t\t\tphantom.exit(1);\n\t\t\t\t};\n\n\t\t\t\tpage.onResourceReceived = function(response) {\n\t\t\t\t\tif ( response.url.replace(/\\/$/, '') === url.replace(/\\/$/, '') ) {\n\t\t\t\t\t\tif ( response.redirectURL ) {\n\t\t\t\t\t\t\turl = response.redirectURL;\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.stage === 'end' && response.status === 200 && response.contentType.indexOf('text/html') !== -1 ) {\n\t\t\t\t\t\t\tresponse.headers.forEach(function(header) {\n\t\t\t\t\t\t\t\theaders[header.name.toLowerCase()] = header.value;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tpage.onResourceError = function(resourceError) {\n\t\t\t\t\twappalyzer.log(resourceError.errorString, 'error');\n\t\t\t\t};\n\n\t\t\t\tpage.open(url, function(status) {\n\t\t\t\t\tvar html, environmentVars;\n\n\t\t\t\t\tif ( status === 'success' ) {\n\t\t\t\t\t\thtml = page.content;\n\n\t\t\t\t\t\tif ( html.length > 50000 ) {\n\t\t\t\t\t\t\thtml = html.substring(0, 25000) + html.substring(html.length - 25000, html.length);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Collect environment variables\n\t\t\t\t\t\tenvironmentVars = page.evaluate(function() {\n\t\t\t\t\t\t\tvar i, environmentVars;\n\n\t\t\t\t\t\t\tfor ( i in window ) {\n\t\t\t\t\t\t\t\tenvironmentVars += i + ' ';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn environmentVars;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\twappalyzer.log({ message: 'environmentVars: ' + environmentVars });\n\n\t\t\t\t\t\tenvironmentVars = environmentVars.split(' ').slice(0, 500);\n\n\t\t\t\t\t\twappalyzer.analyze(hostname, url, {\n\t\t\t\t\t\t\thtml:    html,\n\t\t\t\t\t\t\theaders: headers,\n\t\t\t\t\t\t\tenv:     environmentVars\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tphantom.exit(0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twappalyzer.log('Failed to fetch page', 'error');\n\n\t\t\t\t\t\twappalyzer.driver.sendResponse();\n\n\t\t\t\t\t\tphantom.exit(1);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\twappalyzer.init();\n\t} catch ( e ) {\n\t\twappalyzer.log(e, 'error');\n\n\t\twappalyzer.driver.sendResponse();\n\n\t\tphantom.exit(1);\n\t}\n})();\n","/home/travis/build/npmtest/node-npmtest-wappalyzer/node_modules/wappalyzer/wappalyzer.js":"/**\n * Wappalyzer v4\n *\n * Created by Elbert Alias <elbert@alias.io>\n *\n * License: GPLv3 http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nvar wappalyzer = (function() {\n\t//'use strict';\n\n\t/**\n\t * Application class\n\t */\n\tvar Application = function(app, detected) {\n\t\tthis.app             = app;\n\t\tthis.confidence      = {};\n\t\tthis.confidenceTotal = 0;\n\t\tthis.detected        = Boolean(detected);\n\t\tthis.excludes        = [];\n\t\tthis.version         = '';\n\t\tthis.versions        = [];\n\t};\n\n\tApplication.prototype = {\n\t\t/**\n\t\t * Calculate confidence total\n\t\t */\n\t\tgetConfidence: function() {\n\t\t\tvar total = 0, id;\n\n\t\t\tfor ( id in this.confidence ) {\n\t\t\t\ttotal += this.confidence[id];\n\t\t\t}\n\n\t\t\treturn this.confidenceTotal = Math.min(total, 100);\n\t\t},\n\n\t\t/**\n\t\t * Resolve version number (find the longest version number that contains all shorter detected version numbers)\n\t\t */\n\t\tgetVersion: function() {\n\t\t\tvar i, resolved;\n\n\t\t\tif ( !this.versions.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.versions.sort(function(a, b) {\n\t\t\t\treturn a.length - b.length;\n\t\t\t});\n\n\t\t\tresolved = this.versions[0];\n\n\t\t\tfor ( i = 1; i < this.versions.length; i++ ) {\n\t\t\t\tif ( this.versions[i].indexOf(resolved) === -1 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tresolved = this.versions[i];\n\t\t\t}\n\n\t\t\treturn this.version = resolved;\n\t\t},\n\n\t\tsetDetected: function(pattern, type, value, key) {\n\t\t\tthis.detected = true;\n\n\t\t\t// Set confidence level\n\t\t\tthis.confidence[type + ' ' + ( key ? key + ' ' : '' ) + pattern.regex] = pattern.confidence ? pattern.confidence : 100;\n\n\t\t\t// Detect version number\n\t\t\tif ( pattern.version ) {\n\t\t\t\tvar\n\t\t\t\t\tversion = pattern.version,\n\t\t\t\t\tmatches = pattern.regex.exec(value);\n\n\t\t\t\tif ( matches ) {\n\t\t\t\t\tmatches.forEach(function(match, i) {\n\t\t\t\t\t\t// Parse ternary operator\n\t\t\t\t\t\tvar ternary = new RegExp('\\\\\\\\' + i + '\\\\?([^:]+):(.*)$').exec(version);\n\n\t\t\t\t\t\tif ( ternary && ternary.length === 3 ) {\n\t\t\t\t\t\t\tw.log({ match: match, i: i, ternary: ternary });\n\n\t\t\t\t\t\t\tversion = version.replace(ternary[0], match ? ternary[1] : ternary[2]);\n\n\t\t\t\t\t\t\tw.log({ version: version });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Replace back references\n\t\t\t\t\t\tversion = version.replace(new RegExp('\\\\\\\\' + i, 'g'), match ? match : '');\n\t\t\t\t\t});\n\n\t\t\t\t\tif ( version && this.versions.indexOf(version) < 0 ) {\n\t\t\t\t\t\tthis.versions.push(version);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getVersion();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tvar Profiler = function() {\n\t\tthis.regexCount = 0;\n\t\tthis.startTime  = new Date().getTime();\n\t\tthis.lastTime   = new Date().getTime();\n\t\tthis.slowest    = { duration: null, app: '', type: '', pattern: '' };\n\t\tthis.timedOut   = false;\n\t};\n\n\tProfiler.prototype = {\n\t\tcheckPoint: function(app, type, regex) {\n\t\t\tvar duration = new Date().getTime() - this.lastTime;\n\n\t\t\tif ( !this.slowest.duration || duration > this.slowest.duration ) {\n\t\t\t\tthis.slowest.duration = duration;\n\t\t\t\tthis.slowest.app      = app;\n\t\t\t\tthis.slowest.type     = type;\n\t\t\t\tthis.slowest.regex    = regex;\n\t\t\t}\n\n\t\t\tthis.regexCount++;\n\n\t\t\tthis.lastTime = new Date().getTime();\n\n\t\t\tthis.timedOut = this.lastTime - this.startTime > w.driver.timeout;\n\t\t}\n\t};\n\n\t/**\n\t * Call driver functions\n\t */\n\tvar driver = function(func, args) {\n\t\tif ( typeof w.driver[func] !== 'function' ) {\n\t\t\tw.log('not implemented: w.driver.' + func, 'warn');\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( func !== 'log' ) {\n\t\t\tw.log('w.driver.' + func);\n\t\t}\n\n\t\treturn w.driver[func](args);\n\t};\n\n\t/**\n\t * Parse apps.json patterns\n\t */\n\tvar parse = function(patterns) {\n\t\tvar\n\t\t\tattrs,\n\t\t\tparsed = [];\n\n\t\t// Convert single patterns to an array\n\t\tif ( typeof patterns === 'string' ) {\n\t\t\tpatterns = [ patterns ];\n\t\t}\n\n\t\tpatterns.forEach(function(pattern) {\n\t\t\tattrs = {};\n\n\t\t\tpattern.split('\\\\;').forEach(function(attr, i) {\n\t\t\t\tif ( i ) {\n\t\t\t\t\t// Key value pairs\n\t\t\t\t\tattr = attr.split(':');\n\n\t\t\t\t\tif ( attr.length > 1 ) {\n\t\t\t\t\t\tattrs[attr.shift()] = attr.join(':');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tattrs.string = attr;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tattrs.regex = new RegExp(attr.replace('/', '\\/'), 'i'); // Escape slashes in regular expression\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tattrs.regex = new RegExp();\n\n\t\t\t\t\t\tw.log(e + ': ' + attr, 'error');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tparsed.push(attrs);\n\t\t});\n\n\t\treturn parsed;\n\t};\n\n\t/**\n\t * Main script\n\t */\n\tvar w = {\n\t\tapps:     {},\n\t\tcats:     null,\n\t\tping:     { hostnames: {} },\n\t\tadCache:  [],\n\t\tdetected: {},\n\n\t\tconfig: {\n\t\t\twebsiteURL: 'https://wappalyzer.com/',\n\t\t\ttwitterURL: 'https://twitter.com/Wappalyzer',\n\t\t\tgithubURL:  'https://github.com/AliasIO/Wappalyzer',\n\t\t},\n\n\t\t/**\n\t\t * Log messages to console\n\t\t */\n\t\tlog: function(message, type) {\n\t\t\tif ( type === undefined ) {\n\t\t\t\ttype = 'debug';\n\t\t\t}\n\n\t\t\tif ( typeof message === 'object' ) {\n\t\t\t\tmessage = JSON.stringify(message);\n\t\t\t}\n\n\t\t\tdriver('log', { message: message, type: type });\n\t\t},\n\n\t\t/**\n\t\t * Initialize\n\t\t */\n\t\tinit: function() {\n\t\t\tw.log('w.init');\n\n\t\t\t// Checks\n\t\t\tif ( w.driver === undefined ) {\n\t\t\t\tw.log('no driver, exiting');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Initialize driver\n\t\t\tdriver('init');\n\t\t},\n\n\t\t/**\n\t\t * Analyze the request\n\t\t */\n\t\tanalyze: function(hostname, url, data) {\n\t\t\tvar\n\t\t\t\ti, app, confidence, type, regexMeta, regexScript, match, content, meta, header, version, id,\n\t\t\t\tprofiler     = new Profiler(),\n\t\t\t\tapps         = {},\n\t\t\t\texcludes     = [],\n\t\t\t\tcheckImplies = true;\n\n\t\t\tw.log('w.analyze');\n\n\t\t\t// Remove hash from URL\n\t\t\tdata.url = url = url.split('#')[0];\n\n\t\t\tif ( w.apps === undefined || w.categories === undefined ) {\n\t\t\t\tw.log('apps.json not loaded, check for syntax errors');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( w.detected[url] === undefined ) {\n\t\t\t\tw.detected[url] = {};\n\t\t\t}\n\n\t\t\tfor ( app in w.apps ) {\n\t\t\t\t// Exit loop after one second to prevent CPU hogging\n\t\t\t\t// Remaining patterns will not be evaluated\n\t\t\t\tif ( profiler.timedOut ) {\n\t\t\t\t\tw.log('Timeout, exiting loop');\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tapps[app] = w.detected[url] && w.detected[url][app] ? w.detected[url][app] : new Application(app);\n\n\t\t\t\tfor ( type in w.apps[app] ) {\n\t\t\t\t\tswitch ( type ) {\n\t\t\t\t\t\tcase 'url':\n\t\t\t\t\t\t\tparse(w.apps[app][type]).forEach(function(pattern) {\n\t\t\t\t\t\t\t\tif ( pattern.regex.test(url) ) {\n\t\t\t\t\t\t\t\t\tapps[app].setDetected(pattern, type, url);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tprofiler.checkPoint(app, type, pattern.regex);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'html':\n\t\t\t\t\t\t\tif ( typeof data[type] !== 'string' || !data.html ) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tparse(w.apps[app][type]).forEach(function(pattern) {\n\t\t\t\t\t\t\t\tif ( pattern.regex.test(data[type]) ) {\n\t\t\t\t\t\t\t\t\tapps[app].setDetected(pattern, type, data[type]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tprofiler.checkPoint(app, type, pattern.regex);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'script':\n\t\t\t\t\t\t\tif ( typeof data.html !== 'string' || !data.html ) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tregexScript = new RegExp('<script[^>]+src=(\"|\\')([^\"\\']+)', 'ig');\n\n\t\t\t\t\t\t\tparse(w.apps[app][type]).forEach(function(pattern) {\n\t\t\t\t\t\t\t\twhile ( match = regexScript.exec(data.html) ) {\n\t\t\t\t\t\t\t\t\tif ( pattern.regex.test(match[2]) ) {\n\t\t\t\t\t\t\t\t\t\tapps[app].setDetected(pattern, type, match[2]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tprofiler.checkPoint(app, type, pattern.regex);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'meta':\n\t\t\t\t\t\t\tif ( typeof data.html !== 'string' || !data.html ) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tregexMeta = /<meta[^>]+>/ig;\n\n\t\t\t\t\t\t\twhile ( match = regexMeta.exec(data.html) ) {\n\t\t\t\t\t\t\t\tfor ( meta in w.apps[app][type] ) {\n\t\t\t\t\t\t\t\t\tprofiler.checkPoint(app, type, regexMeta);\n\n\t\t\t\t\t\t\t\t\tif ( new RegExp('(name|property)=[\"\\']' + meta + '[\"\\']', 'i').test(match) ) {\n\t\t\t\t\t\t\t\t\t\tcontent = match.toString().match(/content=(\"|')([^\"']+)(\"|')/i);\n\n\t\t\t\t\t\t\t\t\t\tparse(w.apps[app].meta[meta]).forEach(function(pattern) {\n\t\t\t\t\t\t\t\t\t\t\tif ( content && content.length === 4 && pattern.regex.test(content[2]) ) {\n\t\t\t\t\t\t\t\t\t\t\t\tapps[app].setDetected(pattern, type, content[2], meta);\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tprofiler.checkPoint(app, type, pattern.regex);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tif ( typeof data[type] !== 'object' || !data[type] ) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor ( header in w.apps[app].headers ) {\n\t\t\t\t\t\t\t\tparse(w.apps[app][type][header]).forEach(function(pattern) {\n\t\t\t\t\t\t\t\t\tif ( data[type][header.toLowerCase()] instanceof Array ) {\n\t\t\t\t\t\t\t\t\t\tdata[type][header.toLowerCase()].forEach(function(el) {\n\t\t\t\t\t\t\t\t\t\t\tif ( typeof el === 'string' && pattern.regex.test(el) ) {\n\t\t\t\t\t\t\t\t\t\t\t\tapps[app].setDetected(pattern, type, data[type][header.toLowerCase()], header);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif ( typeof data[type][header.toLowerCase()] === 'string' && pattern.regex.test(data[type][header.toLowerCase()]) ) {\n\t\t\t\t\t\t\t\t\t\t\t\tapps[app].setDetected(pattern, type, data[type][header.toLowerCase()], header);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tprofiler.checkPoint(app, type, pattern.regex);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'env':\n\t\t\t\t\t\t\tif ( typeof data[type] !== 'object' || !data[type] ) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tparse(w.apps[app][type]).forEach(function(pattern) {\n\t\t\t\t\t\t\t\tfor ( i in data[type] ) {\n\n\t\t\t\t\t\t\t\t\tif ( pattern.regex.test(data[type][i]) ) {\n\t\t\t\t\t\t\t\t\t\tapps[app].setDetected(pattern, type, data[type][i]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tprofiler.checkPoint(app, type, pattern.regex);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw.log('[ profiler ] Tested ' + profiler.regexCount + ' regular expressions in ' + ( (new Date().getTime() - profiler.startTime) / 1000 ) + 's');\n\t\t\tw.log('[ profiler ] Slowest pattern took ' + ( profiler.slowest.duration / 1000 ) + 's: ' + profiler.slowest.app + ' | ' + profiler.slowest.type + ' | ' + profiler.slowest.regex);\n\n\t\t\tfor ( app in apps ) {\n\t\t\t\tif ( !apps[app].detected ) {\n\t\t\t\t\tdelete apps[app];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Exclude app in detected apps only\n\t\t\tfor ( app in apps ) {\n\t\t\t\tif (w.apps[app].excludes ) {\n\t\t\t\t\tif ( typeof w.apps[app].excludes === 'string' ) {\n\t\t\t\t\t\tw.apps[app].excludes = [ w.apps[app].excludes ];\n\t\t\t\t\t}\n\n\t\t\t\t\tw.apps[app].excludes.forEach(function(excluded) {\n\t\t\t\t\t\texcludes.push(excluded);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove excluded applications\n\t\t\tfor ( app in apps ) {\n\t\t\t\tif ( excludes.indexOf(app) !== -1 ) {\n\t\t\t\t\tdelete apps[app];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Implied applications\n\t\t\t// Run several passes as implied apps may imply other apps\n\t\t\twhile ( checkImplies ) {\n\t\t\t\tcheckImplies = false;\n\n\t\t\t\tfor ( app in apps ) {\n\t\t\t\t\tconfidence = apps[app].confidence;\n\n\t\t\t\t\tif ( w.apps[app] && w.apps[app].implies ) {\n\t\t\t\t\t\t// Cast strings to an array\n\t\t\t\t\t\tif ( typeof w.apps[app].implies === 'string' ) {\n\t\t\t\t\t\t\tw.apps[app].implies = [ w.apps[app].implies ];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tw.apps[app].implies.forEach(function(implied) {\n\t\t\t\t\t\t\timplied = parse(implied)[0];\n\n\t\t\t\t\t\t\tif ( !w.apps[implied.string] ) {\n\t\t\t\t\t\t\t\tw.log('Implied application ' + implied.string + ' does not exist', 'warn');\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( !apps.hasOwnProperty(implied.string) ) {\n\t\t\t\t\t\t\t\tapps[implied.string] = w.detected[url] && w.detected[url][implied.string] ? w.detected[url][implied.string] : new Application(implied.string, true);\n\n\t\t\t\t\t\t\t\tcheckImplies = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Apply app confidence to implied app\n\t\t\t\t\t\t\tfor ( id in confidence ) {\n\t\t\t\t\t\t\t\tapps[implied.string].confidence[id + ' implied by ' + app] = confidence[id] * ( implied.confidence ? implied.confidence / 100 : 1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw.log(Object.keys(apps).length + ' apps detected: ' + Object.keys(apps).join(', ') + ' on ' + url);\n\n\t\t\t// Keep history of detected apps\n\t\t\tfor ( app in apps ) {\n\t\t\t\tconfidence = apps[app].confidence;\n\t\t\t\tversion    = apps[app].version;\n\n\t\t\t\t// Per URL\n\t\t\t\tw.detected[url][app] = apps[app];\n\n\t\t\t\tfor ( id in confidence ) {\n\t\t\t\t\tw.detected[url][app].confidence[id] = confidence[id];\n\t\t\t\t}\n\n\t\t\t\tif ( w.detected[url][app].getConfidence() >= 100 ) {\n\t\t\t\t\t// Per hostname\n\t\t\t\t\tif ( /(www.)?((.+?)\\.(([a-z]{2,3}\\.)?[a-z]{2,6}))$/.test(hostname) && !/((local|dev(elopment)?|stag(e|ing)?|test(ing)?|demo(shop)?|admin|google|cache)\\.|\\/admin|\\.local)/.test(url) ) {\n\t\t\t\t\t\tif ( !w.ping.hostnames.hasOwnProperty(hostname) ) {\n\t\t\t\t\t\t\tw.ping.hostnames[hostname] = { applications: {}, meta: {} };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( !w.ping.hostnames[hostname].applications.hasOwnProperty(app) ) {\n\t\t\t\t\t\t\tw.ping.hostnames[hostname].applications[app] = { hits: 0 };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tw.ping.hostnames[hostname].applications[app].hits ++;\n\n\t\t\t\t\t\tif ( version ) {\n\t\t\t\t\t\t\tw.ping.hostnames[hostname].applications[app].version = version;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tw.log('Ignoring hostname \"' + hostname + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Additional information\n\t\t\tif ( w.ping.hostnames.hasOwnProperty(hostname) ) {\n\t\t\t\tif ( typeof data.html === 'string' && data.html ) {\n\t\t\t\t\tmatch = data.html.match(/<html[^>]*[: ]lang=\"([a-z]{2}((-|_)[A-Z]{2})?)\"/i);\n\n\t\t\t\t\tif ( match && match.length ) {\n\t\t\t\t\t\tw.ping.hostnames[hostname].meta['language'] = match[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( Object.keys(w.ping.hostnames).length >= 50 || w.adCache.length >= 50 ) {\n\t\t\t\tdriver('ping');\n\t\t\t}\n\n\t\t\tapps = null;\n\t\t\tdata = null;\n\n\t\t\tdriver('displayApps');\n\t\t}\n\t};\n\n\treturn w;\n})();\n\n// CommonJS package\n// See http://wiki.commonjs.org/wiki/CommonJS\nif ( typeof exports === 'object' ) {\n\texports.wappalyzer = wappalyzer;\n}\n"}